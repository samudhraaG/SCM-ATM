/* * ATM Example system - file Balances.java * * copyright (c) 2001 - Russell C. Bjork * */ package banking;import simulation.SimulatedBank;/** Representation for customer's current account balances as returned by the  *  bank.  An empty object of this class is created and sent along with the *  transaction message; the bank fills it in with values. */public class Balances{    /** Constructor.  Create an object whose values will be filled in later, when     *  returning a value to the creator.     */    public Balances()    {    }        /** Mutator.  Fill in values     *     *  @param total the total balance in the account     *  @param available the available balance     */    public void setBalances(Money total, Money available)    {        this.total = total;        this.available = available;    }        /** Accessor for total balance     *     *  @return total balance in the account     */    public Money getTotal()    {        return total;    }        /** Accessor for available balance     *     *  @return available balance     */    public Money getAvailable()    {        return available;    }        // Instance variables        /** Current total balance in the account     */    private Money total;        /** Current available balance in the account     */    private Money available;	/**	 * Simulate processing of an inquiry	 * @param message  the message describing the inquiry requested	 * @param BALANCE	 * @param AVAILABLE_BALANCE	 * @return  status code derived from current values	 */	public Status inquiry(Message message, Money BALANCE[],			Money AVAILABLE_BALANCE[]) {		int cardNumber = message.getCard().getNumber();		int accountNumber = SimulatedBank.ACCOUNT_NUMBER[cardNumber][message				.getFromAccount()];		if (accountNumber == 0)			return new SimulatedBank.Failure("Invalid account type");		setBalances(BALANCE[accountNumber], AVAILABLE_BALANCE[accountNumber]);		return new SimulatedBank.Success();	}	/**	 * Simulate completion of a deposit	 * @param message  the message describing the deposit requested	 * @param BALANCE	 * @param AVAILABLE_BALANCE	 * @return  status code - must always be success in this case	 */	public Status completeDeposit(Message message, Money BALANCE[],			Money AVAILABLE_BALANCE[]) {		int cardNumber = message.getCard().getNumber();		int accountNumber = SimulatedBank.ACCOUNT_NUMBER[cardNumber][message				.getToAccount()];		if (accountNumber == 0)			return new SimulatedBank.Failure("Invalid account type");		Money amount = message.getAmount();		BALANCE[accountNumber].add(amount);		setBalances(BALANCE[accountNumber], AVAILABLE_BALANCE[accountNumber]);		return new SimulatedBank.Success();	}	/**	 * Simulate processing of a withdrawal	 * @param message  the message describing the withdrawal requested	 * @param AVAILABLE_BALANCE	 * @param BALANCE	 * @return  status code derived from current values	 */	public Status withdrawal(Message message, Money AVAILABLE_BALANCE[],			Money BALANCE[]) {		int cardNumber = message.getCard().getNumber();		int accountNumber = SimulatedBank.ACCOUNT_NUMBER[cardNumber][message				.getFromAccount()];		if (accountNumber == 0)			return new SimulatedBank.Failure("Invalid account type");		Money amount = message.getAmount();		Money limitRemaining = new Money(SimulatedBank.DAILY_WITHDRAWAL_LIMIT);		limitRemaining.subtract(SimulatedBank.WITHDRAWALS_TODAY[cardNumber]);		if (!amount.lessEqual(limitRemaining))			return new SimulatedBank.Failure("Daily withdrawal limit exceeded");		if (!amount.lessEqual(AVAILABLE_BALANCE[accountNumber]))			return new SimulatedBank.Failure("Insufficient available balance");		SimulatedBank.WITHDRAWALS_TODAY[cardNumber].add(amount);		BALANCE[accountNumber].subtract(amount);		AVAILABLE_BALANCE[accountNumber].subtract(amount);		setBalances(BALANCE[accountNumber], AVAILABLE_BALANCE[accountNumber]);		return new SimulatedBank.Success();	}}